////////////////////////////////////////////////////////////////////////////////
//Внешняя обработка для 1С. Где показаны наглядные примеры по работе и обработке 
//Объектов через СКД и Табличный документ, с возможностью проверки, отладки, 
//сохранения как в режиме формы (УФ и ОФ), так и модуля Объекта.
//
//Наверное, одна из лучших обработок в мире ;)
////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РЕГИСТРАЦИИ ОБРАБОТКИ И КОМАНД

//************************************************************
// Процедура, которая подготавливает структуру таблицы команд
Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление"		, Новый ОписаниеТипов("Строка"));
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование"		, Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение"	, Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор"			, Новый ОписаниеТипов("Строка"));
	
	Команды.Колонки.Добавить("ЗаменяемыеКоманды"	, Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

//************************************************************
// Создает в таблице команд новую строку
Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "", ЗаменяемыеКоманды = "")
	
	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление;
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	НоваяКоманда.ЗаменяемыеКоманды 		= ЗаменяемыеКоманды;
	
КонецФункции

//************************************************************
// Вызываться программой, при добавлении файла внешней обработки в справочник.
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Данные для заполнения сведений об обработке:
	ЭтотОбъектМетаданные 	= ЭтотОбъект.Метаданные();
	НаименованиеОбработки 	= ЭтотОбъектМетаданные.Синоним;	// Возьмем из синонима
	
	ЭтотОбъектМетаданныеКомментарий = ЭтотОбъектМетаданные.Комментарий;
	КомментарийМассив 				= _СтрРазделить(ЭтотОбъектМетаданныеКомментарий, ","); 	//Комментарий вида: v1.0, КучеровРМ
	ВерсияОбработки 				= СтрЗаменить(КомментарийМассив[0], "v", ""); 			// Возьмем из комментария
	ИнформацияПоОбрабтке 			= "Внешняя обработка универсал";	                    // Произвольное описание
	
	//Массив назначений
	МассивНазначений 	= Новый Массив;
	УказанныеТипы 		= ЭтотОбъектМетаданные.Реквизиты.СсылкаНаДокумент.Тип.Типы();      // Возьмем типы из реквизита "Документ"
	Для Каждого УказанныйТип ИЗ УказанныеТипы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(УказанныйТип);
		Если ОбъектМетаданных <> Неопределено Тогда
			МассивНазначений.Добавить("Документ." + ОбъектМетаданных.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	//Заполняем структуру сведений
	//	1. Вид - вид обработки.
	//	Тип данных - строка, допустимо одно из 6 значений.
	//	Значения.
	//	1) Глобальные - "ДополнительнаяОбработка", "ДополнительныйОтчет"
	//	2) Назначаемые - "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма" или "СозданиеСвязанныхОбъектов".
	
	//	2. Назначение - объект, для которого назначается данная обработка, 
	//	Массив строк имен объектов метаданных.
	//	Примеры значений массива - "Документ.АвансовыйОтчет" или "Справочник.*", где * - означает все объекта данного вида.
	//	Для глобальных (не назначаемых) обработок параметр не имеет смысла.
	
	//	3. Наименование - название обработки, произвольное наименование
	//	Тип данных - произвольная строка.
	//	Данное наименование будет отображаться в списке дополнительных обработок.
	
	//	4. Версия - номер версии обработки
	//	Тип данных - строка в формате "ХХ.ХХ".
	//	Обозначает версию данной обработки, данная версия будет отображаться в списке дополнительных отчетов и обработок.
	
	//	5. БезопасныйРежим - режим контроля прав пользователя.
	//	Тип данных - булево.
	
	//	6. Информация - краткое описание обработки.
	//	Тип данных - строка.
	//	Данное описание будет отображаться в списке дополнительных обработок.
	
	//	7. Команды - действия предоставляемые обработкой.
	//	Тип данных - таблица значений.
	//	Таблица содержит 5 колонок:
	//	1) Представление. Наименование команды в пользовательском интерфейсе;
	//	2) Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки.
	//	3) Использование. Строка, одно из значений - 
	//		- ОткрытиеФормы. Открывает форму обработки.
	//		- ВызовКлиентскогоМетода. Вызов клиентского экспортного метода модуля формы
	//		- ВызовСерверногоМетода. Вызов экспортного серверного метода модуля объекта.
	//		Для внешних печатных форм нужно указывать последнее значение.
	//	4) ПоказыватьОповещение. Булево, нужно ли показывать оповещение при начале и окончании действия.
	//	5) Модификатор. Для внешних печатных форм должно содержаться значение "ПечатьMXL".
	//	6) ЗаменяемыеКоманды
	
	//Добавляемые команды на формы документов
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, НаименованиеОбработки, "Идентификатор", "ОткрытиеФормы", Истина);
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид"				, "ДополнительнаяОбработка"); 		// Варинаты: ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение"		, МассивНазначений);  		// Массив документов, обрабатываемых обработкой
	ПараметрыРегистрации.Вставить("Наименование"	, НаименованиеОбработки); 	// Имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия"			, ВерсияОбработки);         // Версия обработки, которая будет отображаться в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим"	, Ложь);       				// Включение безопасного режима
	ПараметрыРегистрации.Вставить("Информация"		, ИнформацияПоОбрабтке);	// Описание обработки для пользователя
	ПараметрыРегистрации.Вставить("Команды"			, ТаблицаКоманд);        	// Таблица команд, добавляемых в систему
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

// Копирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) 
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ЗапросНабора1" , Неопределено);
	//Структура.Вставить("ЗапросНабора2", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции // ПолучитьПустуюСтруктуруРезультата()

Функция ПолучитьПустуюСтруктуруНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив); //
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПолучитьМакетОбъекта(пИмяМакета) Экспорт
	
	ОбработкаОбъект = ЭтотОбъект;
	лРезультат 		= ОбработкаОбъект.ПолучитьМакет(пИмяМакета);
	
	Возврат лРезультат;
	
КонецФункции

Функция ПолучитьСхемуКомпоновкиДанных(ТолькоИмяВернуть = Ложь) Экспорт
	
	//СхемаКомпоновкиДанных 	= Неопределено;
	//ОбработкаОбъект 		= ЭтотОбъект;
	//
	//СхемаКомпоновкиДанныхИмя = "СхемаКомпоновкиДанных"; //Имя макета СКД, на основе которого формировать запрос
	//
	//Возврат  ?(ТолькоИмяВернуть, СхемаКомпоновкиДанныхИмя, ОбработкаОбъект.ПолучитьМакет(СхемаКомпоновкиДанныхИмя));
	//
	СхемаКомпоновкиДанныхИмя = "СхемаКомпоновкиДанных";
	
	Если ТолькоИмяВернуть Тогда
		лРезультат 		= СхемаКомпоновкиДанныхИмя;
	Иначе
		//лРезультат = ?(ТолькоИмяВернуть, СхемаКомпоновкиДанныхИмя, ОбработкаОбъект.ПолучитьМакет(СхемаКомпоновкиДанныхИмя));//Удалить
		лРезультат 	= ПолучитьМакетОбъекта(СхемаКомпоновкиДанныхИмя);
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции

//+++ КучеровРМ 20.02.2020
Функция ПолучитьТабличныйДокумент(ТолькоИмяВернуть = Ложь) Экспорт
	
	СхемаКомпоновкиДанныхИмя = "СхемаКомпоновкиДанных";
	
	Если ТолькоИмяВернуть Тогда
		лРезультат 		= СхемаКомпоновкиДанныхИмя;
	Иначе
		//лРезультат = ?(ТолькоИмяВернуть, СхемаКомпоновкиДанныхИмя, ОбработкаОбъект.ПолучитьМакет(СхемаКомпоновкиДанныхИмя));//Удалить
		лРезультат 	=  ПолучитьМакетОбъекта(СхемаКомпоновкиДанныхИмя);
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьТабличныйДокумент() //--- КучеровРМ 20.02.2020

//Функция Функция подготавливает структуру данных, необходимую для вывода
//-------------------------------------------------------------------------
//Параметры:
//		СтруктураНастроек - Тип - описание
//		ОбработкаОбъект - Тип - описание
//Возвращаемое значение:
//		Стрруктура - описание
//-------------------------------------------------------------------------
//автор: Кучеров Р 28.05.2018 
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, ОбработкаОбъект) Экспорт
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА СХЕМЫ КОМПОНОВКИ ДАННЫХ И КОМПОНОВЩИКА НАСТРОЕК СКД
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик 	= Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйИсточник 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Компоновщик.Инициализировать(НовыйИсточник);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	//Копирование настроек с формы в компоновщик	
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		//СкопироватьЭлементы(Компоновщик.Настройки.Выбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Выбор);
		//СкопироватьЭлементы(Компоновщик.Настройки.Порядок, СтруктураНастроек.КомпоновщикНастроек.Настройки.Порядок);
		//СкопироватьЭлементы(Компоновщик.Настройки.УсловноеОформление, СтруктураНастроек.КомпоновщикНастроек.Настройки.УсловноеОформление);
	КонецЕсли;
	
	// Параметры компоновщика настроек.
	//Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
	//	Для каждого Элемент  из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
	//		ЗначениеПараметраИзСтруктурыНастроек = СтруктураНастроек.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Элемент.Параметр) ;
	//		Если Строка(ЗначениеПараметраИзСтруктурыНастроек.Параметр) = "ВыводитьСерии" Тогда
	//			ЗначениеПараметра = ЗначениеПараметраИзСтруктурыНастроек.Значение и ЗначениеПараметраИзСтруктурыНастроек.Использование;
	//			Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Параметр,ЗначениеПараметра);
	//		Иначе	
	//			Если ЗначениеПараметраИзСтруктурыНастроек.Использование Тогда
	//				Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Параметр,ЗначениеПараметраИзСтруктурыНастроек.Значение);
	//			КонецЕсли;
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли; 	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ВСПОМОГАТЕЛЬНЫХ ДАННЫХ ДЛЯ СОПОСТАВЛЕНИЯ ПОЛЕЙ ШАБЛОНА И СКД
	
	//Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля Цикл
	//	СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(ПолучитьИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	//КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// ВЫПОЛНЕНИЕ ЗАПРОСА
	
	Если ЗначениеЗаполнено(МакетКомпоновкиДанных.НаборыДанных) Тогда
		СтруктураРезультата.ЗапросНабора1 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос);
		//СтруктураРезультата.ЗапросНабора2 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных2.Запрос);
		
		// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
		Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			СтруктураРезультата.ЗапросНабора1.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			//СтруктураРезультата.ЗапросНабора2.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;	
	КонецЕсли; 
	
	Возврат СтруктураРезультата;
	
КонецФункции // ПодготовитьСтруктуруДанных()

Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент)
	
	ПоследняяСтрока 	= ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка 	= ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек 		= ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка); 
	// Создаем описание источника данных на основании области ячеек табличного документа.
	ИсточникДанных 		= Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
	// Создаем объект для интеллектуального построения отчетов,
	// указываем источник данных и выполняем построение отчета.
	ПостроительОтчета 	= Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных 	= ИсточникДанных;
	ПостроительОтчета.Выполнить();
	// Результат выгружаем в таблицу значений.
	ТабЗначений 		= ПостроительОтчета.Результат.Выгрузить();
	
	Возврат ТабЗначений;
	
КонецФункции

//пКомпоновщикНастроекКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных - Заполняется, если вызывалось с формы, где задан компановщик (отбор, поля и т.д.), иначе по умолчанию из СКД
Функция ПолучитьЗапросДанных(пКомпоновщикНастроекКомпоновкиДанных = Неопределено) Экспорт
	
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.КомпоновщикНастроек            = пКомпоновщикНастроекКомпоновкиДанных;
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанных(Истина);
	
	// ВыполнениеЗапроса
	ОбработкаОбъект = ЭтотОбъект;
	
	Запросы = ПодготовитьСтруктуруДанных(СтруктураНастроек, ОбработкаОбъект);
	
	Запрос = Запросы.ЗапросНабора1;
	// Установка параметров для запроса (параметры в СКД на соответствующей вкладке)
	
	//РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Запрос;
	
КонецФункции

Функция НачалоОбработки(Таблица, ИмяФлага = "Флаг")
	
	лРезультат = Неопределено;
	
	#Если НаКлиенте Тогда
		Если Таблица.Количество() > 0 Тогда
			Ответ = Вопрос("Начать обработку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Подтверждение начала обработки");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли; 	
	#КонецЕсли 
	
	// Дальнейшая обработка только тех, что с флагом
	Если НЕ ПустаяСтрока(ИмяФлага) Тогда			   
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(ИмяФлага, Истина);
		НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	Иначе
		НайденныеСтроки = Таблица;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	лРезультат = НайденныеСтроки;
	
	Возврат лРезультат;
	
КонецФункции // НачалоОбработки()

Функция СформироватьДанные(пКомпоновщикНастроекКомпоновкиДанных = Неопределено, пПараметрыЗапроса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); //Потому что если не хватит прав на чтение, то эти данные не вернёт
	
	Запрос 		= ПолучитьЗапросДанных(пКомпоновщикНастроекКомпоновкиДанных);
	
	Если пПараметрыЗапроса <> Неопределено Тогда
		Для каждого пПараметрыЗапросаЭлем Из пПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(пПараметрыЗапросаЭлем.Ключ	, пПараметрыЗапросаЭлем.Значение); 
		КонецЦикла; 	
	КонецЕсли;
	
	лДанныеТЗ 	= Запрос.Выполнить().Выгрузить();
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Возврат лДанныеТЗ;
	
КонецФункции

Функция _СтрРазделить(знач Строка, Разделитель, ВключатьПустые = Истина) Экспорт // _СтрРазделить()
	Результат = Новый Массив;
	
	Если Строка = "" Тогда 
		Если ВключатьПустые Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если ВключатьПустые ИЛИ НЕ Подстрока = "" Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если ВключатьПустые ИЛИ НЕ Строка = "" Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция _СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска = Неопределено, НачальнаяПозиция = Неопределено, НомерВхождения = 1) Экспорт // _СтрНайти()
	// НаправлениеПоиска: СКонца,СНачала. По умолчанию: СНачала
	
	Если Строка = "" и ПодстрокаПоиска = "" Тогда
		// чтобы отрабатывало как в платформе
		Если НаправлениеПоиска = "СКонца" Тогда
			Если НомерВхождения = 1 Тогда
				Возврат 1;
			Иначе
				Возврат 0;
			КонецЕсли;
		Иначе
			Возврат мин(НомерВхождения, ?(НачальнаяПозиция=Неопределено, 1, НачальнаяПозиция));
		КонецЕсли;
	КонецЕсли;
	
	Если НачальнаяПозиция = Неопределено Тогда
		Если НаправлениеПоиска = "СКонца" Тогда
			лНачальнаяПозиция = СтрДлина(Строка);
		Иначе
			лНачальнаяПозиция = 1;
		КонецЕсли;
	Иначе
		лНачальнаяПозиция = НачальнаяПозиция;
	КонецЕсли;
	
	Если НаправлениеПоиска = "СКонца" Тогда
		лСтрока = "";
		Для сч = 1 По СтрДлина(Строка) Цикл
			лСтрока = Сред(Строка, сч, 1) + лСтрока;
		КонецЦикла;
		лПодстрокаПоиска = "";
		Для сч = 1 По СтрДлина(ПодстрокаПоиска) Цикл
			лПодстрокаПоиска = Сред(ПодстрокаПоиска, сч, 1) + лПодстрокаПоиска;
		КонецЦикла;
		лНачальнаяПозиция = макс(1, СтрДлина(Строка)-лНачальнаяПозиция-СтрДлина(ПодстрокаПоиска)+2);
	Иначе
		лСтрока = Строка;
		лПодстрокаПоиска = ПодстрокаПоиска;
		лНачальнаяПозиция = лНачальнаяПозиция;
	КонецЕсли;
	
	лНомерВхождения = 0;
	Результат = Найти(Сред(лСтрока, лНачальнаяПозиция), лПодстрокаПоиска);
	Пока Результат Цикл
		лНачальнаяПозиция = Результат + лНачальнаяПозиция + СтрДлина(ПодстрокаПоиска)-1;
		лНомерВхождения = лНомерВхождения + 1;
		Если лНомерВхождения = НомерВхождения Тогда
			Прервать;
		КонецЕсли;
		Результат = Найти(Сред(лСтрока, лНачальнаяПозиция), лПодстрокаПоиска);
	КонецЦикла;
	
	Если лНомерВхождения = НомерВхождения Тогда
		Результат = лНачальнаяПозиция - СтрДлина(ПодстрокаПоиска);
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Если НаправлениеПоиска = "СКонца" И Результат<>0 Тогда
		Результат = СтрДлина(Строка) - Результат - СтрДлина(ПодстрокаПоиска) + 2;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты) Экспорт
//	
//	

//КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ИдентификаторКоманды = "ВыполнитьКоманду" Тогда
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует печатную форму документа.
//
Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	
	//	Алгоритм формирования печатной формы
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
// ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
// МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
// ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
// КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
// ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено) Экспорт
	
	//УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, "Заголовок табличного документа", СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати));
	
КонецПроцедуры // Печать()

