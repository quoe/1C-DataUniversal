////////////////////////////////////////////////////////////////////////////////
//Внешняя обработка для 1С. Где показаны наглядные примеры по работе и обработке 
//Объектов через СКД и Табличный документ, с возможностью проверки, отладки, 
//сохранения как в режиме формы (УФ и ОФ), так и модуля Объекта.
//
//Наверное, одна из лучших обработок в мире ;)
////////////////////////////////////////////////////////////////////////////////

#Область TODO
//Чередовать цвет фона строк таблицы между белым и сероватым в зависимости чётности строки. Чётная - белая
//Создавать колонки программно только если был выполнен запрос. В случае СКД все видимости задавать полями и прочим (но пока хз как)
//Названия колонок при загрузке данных из ТабличногоДокумента брать из первой строки, количество колонок брать из ТабличныйДокумент.ШиринаТаблицы
//Писать прямо на форме программный код, откуда какие данные как загружать, с чем сравнивать, в какие колонки что присваивать
//В месте: СтруктураРезультата.ЗапросНабора1 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос); НаборДанных1 указывать именем, т.к. может быть другим
//При обработке колонок запроса, если начинается с "_" то делать не доступным колонку, если "__" то делать колонку невидимой
//Если панель разработчика скрыта, то специальной последовательностью давать её сделать видимой. Напр., через несколько нажатий "ТаблицаИнвертироватьФлаги"
//В структуру в методе СтруктураПараметров добавлять все колонки строки ТЗ
#КонецОбласти // TODO 

//+++====== По умолчанию ===================================================================

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт


КонецПроцедуры // ВыполнитьКоманду()

&НаКлиенте
Процедура Печать(Команда)
	
	лТабличныйДокумент = ПечатьНаСервере();
	лТабличныйДокумент.Показать();
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()

	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяВРЕГ");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("Экземпляров");
	КоллекцияПечатныхФорм.Колонки.Добавить("Картинка");
	КоллекцияПечатныхФорм.Колонки.Добавить("ПолныйПутьКМакету");
	
	Строка = КоллекцияПечатныхФорм.Добавить();
	//Строка.ИмяМакета = ИмяМакета;
	Строка.ИмяВРЕГ = ВРег(Строка.ИмяМакета);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаДокумент);
	
	ОбъектыПечати = Новый СписокЗначений;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати);
	
	Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Возврат ПечатнаяФорма.ТабличныйДокумент;
	КонецЦикла;

КонецФункции // ПечатьНаСервере()

//---====== По умолчанию =================================================================== 

&НаСервереБезКонтекста
Функция ОбщийМодуль(пИмяМодуля)
	
	лРезультат 		= Неопределено;
	лОбщийМодуль 	= Метаданные.ОбщиеМодули.Найти(пИмяМодуля);
	
	Если лОбщийМодуль <> Неопределено Тогда
		Результат 	= лОбщийМодуль;
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ОбщийМодуль()

//+++ КучеровРМ 08.05.2020
&НаСервереБезКонтекста
Функция РольСуществуетИДоступна(пИмяРоли)
	
	лРезультат 	= Ложь;
	лРоль 		= Метаданные.Роли.Найти(пИмяРоли);
	
	Если лРоль <> Неопределено Тогда
		Результат 	= РольДоступна(пИмяРоли);
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // РольСуществуетИДоступна() //--- КучеровРМ 08.05.2020
 

&НаСервереБезКонтекста
Функция ПолучитьВерсиюБСПНаСервере()
	
	лИмяОбщегоМодуля 	= "СтандартныеПодсистемыСервер";
	
	ВерсияБСП 			= "";
	
	лСтандартныеПодсистемыСервер = ОбщийМодуль(лИмяОбщегоМодуля);
	Если лСтандартныеПодсистемыСервер <> Неопределено Тогда
		ВерсияБСП = лСтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Иначе
		Сообщить("Общий модуль не найден: " + лИмяОбщегоМодуля);
	КонецЕсли; 
	
	Возврат ВерсияБСП;
	
КонецФункции // ПолучитьВерсиюБСПНаСервере()

&НаКлиенте
Процедура ПолучитьВерсиюБСП(Команда)
	
	ВерсияБСП = ПолучитьВерсиюБСПНаСервере();
	Сообщить(ВерсияБСП);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМетаданныеОбработки(пСвойство = "")
	
	ОбъектЗначение 			= РеквизитФормыВЗначение("Объект");
	ЭтотОбъектМетаданные 	= ОбъектЗначение.Метаданные();
	
	лСвойство 				= СтрЗаменить(пСвойство, " ", "");
	
	Если ПустаяСтрока(лСвойство) Тогда
		Результат = ЭтотОбъектМетаданные;
	Иначе
		Результат = Новый Структура;
		
		лСвойстваМасс = СтрРазделить(лСвойство, ",", Ложь);
		Для каждого лЭлем Из лСвойстваМасс Цикл
			
			Результат.Вставить(лЭлем, ЭтотОбъектМетаданные[лЭлем]);
			
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьМетаданныеОбработки()
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Видимость элементов разработчика
	// 	Из наименований базы
	ЗаголовкСистемы 		= Метаданные.Представление();
	//ЗаголовкСистемы 		= ЗаголовокСистемы();
	//ЗаголовкСистемы 		= ГлИдентификаторКонфигурации();
	МетаданныеСиноним 		= Метаданные.Синоним;
	МетаданныеКомментарий 	= Метаданные.Комментарий; 
	
	// 	Из наименования самой обработки
	ЭтотОбъектМетаданные 	= ПолучитьМетаданныеОбработки();
	НаименованиеОбработки 	= ЭтотОбъектМетаданные.Синоним;	// Возьмем из синонима
	
	ЭтоБазаДляТеста 		= Ложь;
	
	ПодстрокаДляПоискаТеста 		= "ТЕСТ,[КОПИЯ]";
	ПодстрокаДляПоискаТестаМассив 	= СтрРазделить(ПодстрокаДляПоискаТеста, ",");
	
	Для каждого ПодстрокаДляПоискаТестаМассивЭлем Из ПодстрокаДляПоискаТестаМассив Цикл
		
		ПодстрокаДляПоискаТестаМассивЭлем = СокрЛП(ПодстрокаДляПоискаТестаМассивЭлем);
		ЭтоБазаДляТеста = СтрНайти(ВРег(ЗаголовкСистемы), ПодстрокаДляПоискаТестаМассивЭлем) 
		ИЛИ СтрНайти(ВРег(МетаданныеСиноним)	, ПодстрокаДляПоискаТестаМассивЭлем)
		ИЛИ СтрНайти(ВРег(МетаданныеКомментарий), ПодстрокаДляПоискаТестаМассивЭлем)
		ИЛИ СтрНайти(ВРег(НаименованиеОбработки), ПодстрокаДляПоискаТестаМассивЭлем)
		ИЛИ РольСуществуетИДоступна("ПолныеПрава");
		
		Если ЭтоБазаДляТеста Тогда
			Прервать;	
		КонецЕсли; 
	КонецЦикла;                   
	
	ЭтоБазаДляТеста = Истина; //Для теста всегда истина, но если на бою, то удаляем эту строчку
	
	Если ЭтоБазаДляТеста Тогда // Если система содержит подстроку ТЕСТ, то выводим интрумент разработчика и отладчика (если только это не фирма по продаже теста)
		Элементы.ГруппаРазработчика.Видимость = Истина; 
	Иначе
		Элементы.ГруппаРазработчика.Видимость = Ложь; 
	КонецЕсли;
	
	ПрименениеСКД();
	
	//ТабличныйДокумент.Макет 	= ПолучитьМакет("СоответствиеПроизводителей").Область(1, 1, Макет.ВысотаТаблицы, Макет.ШиринаТаблицы);
	ТабличныйДокумент 	= РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаКомпоновкиДанных");
	
	Элементы.ОбработатьЧерезМодуль.Видимость 	= Ложь;
	Элементы.ГруппаНастройкиВыбора.Видимость 	= Ложь; 
	Элементы.ГруппаНастройкиПорядок.Видимость 	= Ложь; 
	
	//Создать программно команды установки флагов таблицы. Т.е. если их изначально нет у таблицы, то можем сделать
	//лГруппаФлаги				=	ЭтаФорма.Элементы.Добавить("ГруппаФлаги", Тип("ГруппаФормы"), Элементы.ТаблицаАкты.КоманднаяПанель);
	//лГруппаФлаги.Вид			=	ВидГруппыФормы.ГруппаКнопок;
	//лГруппаФлаги.Заголовок		=	"Флаги";
	//лГруппаФлаги.Отображение 	=	ОтображениеГруппыКнопок.Компактное; 

	////ТаблицаУстановитьФлаги
	//ИмяКоманды 				= "ТаблицаУстановитьФлаги";
	//КомандаФормы 			= ЭтаФорма.Команды.Добавить(ИмяКоманды);
	//КомандаФормы.Действие 	= "Подключаемый_ТаблицаУстановитьФлаги"; //&НаКлиенте
	//КомандаФормы.Заголовок 	= "Установить флаги";
	//КомандаФормы.Подсказка 	= "Установить флаги";
	//КомандаФормы.Отображение= ОтображениеКнопки.Картинка;
	//КомандаФормы.Картинка 	= БиблиотекаКартинок.УстановитьФлажки;
	//
	//НовыйЭлемент 			= ЭтаФорма.Элементы.Добавить("ТаблицаУстановитьФлаги", Тип("КнопкаФормы"), лГруппаФлаги);
	//НовыйЭлемент.ИмяКоманды = ИмяКоманды;

	////ТаблицаИнвертироватьФлаги
	//ИмяКоманды 				= "ТаблицаИнвертироватьФлаги";
	//КомандаФормы 			= ЭтаФорма.Команды.Добавить(ИмяКоманды);
	//КомандаФормы.Действие 	= "Подключаемый_ТаблицаИнвертироватьФлаги"; //&НаКлиенте
	//КомандаФормы.Заголовок 	= "Инвертировать флаги";
	//КомандаФормы.Подсказка 	= "Инвертировать флаги";
	//КомандаФормы.Отображение= ОтображениеКнопки.Картинка;
	//КомандаФормы.Картинка 	= БиблиотекаКартинок.ПереключитьАктивность;
	//
	//НовыйЭлемент 			= ЭтаФорма.Элементы.Добавить("ТаблицаИнвертироватьФлаги", Тип("КнопкаФормы"), лГруппаФлаги);
	//НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	//
	////ТаблицаСнятьФлаги
	//ИмяКоманды 				= "ТаблицаСнятьФлаги";
	//КомандаФормы 			= ЭтаФорма.Команды.Добавить(ИмяКоманды);
	//КомандаФормы.Действие 	= "Подключаемый_ТаблицаСнятьФлаги"; //&НаКлиенте
	//КомандаФормы.Заголовок 	= "Снять флаги";
	//КомандаФормы.Подсказка 	= "Снять флаги";
	//КомандаФормы.Отображение= ОтображениеКнопки.Картинка;
	//КомандаФормы.Картинка 	= БиблиотекаКартинок.СнятьФлажки;
	//
	//НовыйЭлемент 			= ЭтаФорма.Элементы.Добавить("ТаблицаСнятьФлаги", Тип("КнопкаФормы"), лГруппаФлаги);
	//НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ПрименениеСКД()
	
	// Установки СКД
	пНастройкиКомпоновщика = Неопределено;
	
	ЗагрузитьСохраненныеНастройкиНаСервере(пНастройкиКомпоновщика);
	
	Если НЕ ЗагружатьСохраненныеНастройки Тогда
		пНастройкиКомпоновщика = Неопределено;
	КонецЕсли;
	
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
	
	// Типовое начальное условное оформление элементов таблицы
	ПрименитьУсловноеОфомление("Таблица.Флаг", ВидСравненияКомпоновкиДанных.Равно, Истина, "Таблица", , , , Истина); // Выделение жирным шрифтом строк с флагом
	
КонецПроцедуры // ПрименениеСКД()
 

&НаСервере
Функция ЗагрузитьИнструкциюНаСервере(ИмяМакета)
	
	Макет 		= РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
	Инструкция 	= Макет.ПолучитьТекст();
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьИнструкциюНаСервере("МакетИнструкция");
	
	// Видимость
	Элементы.ПредставлениеКолонок.Видимость = УстановитьВидимостьНастройкиПредставления(); 
	
	НачальнаяВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция УстановитьВидимостьНастройкиПредставления()
	
	Результат = ПредставлениеКолонок.Количество() > 0; // Истина, если элменты есть
	
	Возврат Результат;
	
КонецФункции // УстановитьВидимостьНастройкиВидимости()
 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если СохранитьНастройкиПриЗакрытии Тогда
		Если НЕ ЗавершениеРаботы Тогда // Т.к. в случае завершения будет нельзя вызывать Сервер
			ПриЗакрытииНаСервере();
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьНастройкиКомпановкиДанныхНаСервере();
КонецПроцедуры

//+++ ====== Сохранение и Загрузка настроек СКД ================================================

&НаКлиенте
Процедура СохранитьНастройкиКомпановкиДанных()
	
	СохранитьНастройкиКомпановкиДанныхНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьНастройкиКомпановкиДанныхНаСервере()
	
	НастройкиКомпоновщикаХранилище = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.Настройки);
	
	КлючНастроек 	= ПолучитьКлючНастроек();
	ДопПараметры 	= Новый Структура();
	ДопПараметры.Вставить("НастройкиКомпоновщикаХранилище"	, НастройкиКомпоновщикаХранилище);
	ДопПараметры.Вставить("ЗагружатьСохраненныеНастройки"	, ЗагружатьСохраненныеНастройки);
	ДопПараметры.Вставить("СохранитьНастройкиПриЗакрытии"	, СохранитьНастройкиПриЗакрытии);
	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек, КлючНастроек, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСохраненныеНастройки(Команда)
	
	ПрименениеСКД();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныеНастройкиНаСервере(пНастройкиКомпоновщика)
	
	КлючНастроек 			= ПолучитьКлючНастроек();
	СохраненныеНастройки 	= ХранилищеОбщихНастроек.Загрузить(КлючНастроек, КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Если СохраненныеНастройки.Свойство("НастройкиКомпоновщикаХранилище") Тогда
			пНастройкиКомпоновщика = СохраненныеНастройки.НастройкиКомпоновщикаХранилище.Получить();
		Конецесли;
		Если СохраненныеНастройки.Свойство("ЗагружатьСохраненныеНастройки") Тогда
			ЗагружатьСохраненныеНастройки = СохраненныеНастройки.ЗагружатьСохраненныеНастройки;
		Конецесли;
		Если СохраненныеНастройки.Свойство("СохранитьНастройкиПриЗакрытии") Тогда
			СохранитьНастройкиПриЗакрытии = СохраненныеНастройки.СохранитьНастройкиПриЗакрытии;
		Конецесли;
	Конецесли;
	
КонецПроцедуры

//--- ====== Сохранение и Загрузка настроек СКД ================================================ 

//+++====== Отбор СКД ================================================

// Формирует синоним переменной.
// Пример: на входе "ИмяПеременнойАБВГ", на выходе "Имя переменной АБВГ"
//
// Параметры
// ИмяРеквизита - Строка. Имя переменной, имя колонки таблицы
//
// Возвращаемое значение:
// Строка - Представление переменной
//
Функция СформироватьСиноним(ИмяРеквизита)
	
	Перем Синоним, ъ, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
	
	Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
	ДлинаСтроки = СтрДлина(ИмяРеквизита);
	Для ъ=2 По ДлинаСтроки Цикл
		Символ = Сред(ИмяРеквизита, ъ, 1);
		ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
		СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
		Прописная = Символ = ВРег(Символ);
		ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
		СледПрописная = СледСимвол = ВРег(СледСимвол);
		
		// Варианты:
		Если НЕ ПредПрописная И Прописная Тогда
			Синоним = Синоним + " " + Символ;
		ИначеЕсли Прописная И НЕ СледПрописная Тогда
			Синоним = Синоним + " " + Символ;
		Иначе
			Синоним = Синоним + Символ;
		Конецесли;
	КонецЦикла;
	
	Возврат Синоним;
	
КонецФункции // СформироватьСиноним()

&НаСервере
Функция ПолучитьКлючНастроек()
	
	ЭтотОбъектМетаданные 	= ПолучитьМетаданныеОбработки();
	ИмяОбработки 			= ЭтотОбъектМетаданные.Имя;	
	
	КлючДляПользователя 	= Ложь;
	Если КлючДляПользователя Тогда
		ТекущийПользователь = "." + СтрЗаменить(ИмяПользователя(), " ", "");
	Иначе
		ТекущийПользователь = "";
	КонецЕсли; 
	
	КлючНастроек 			= "Обработка." + ИмяОбработки + ТекущийПользователь;
	
	Возврат КлючНастроек;
	
КонецФункции

&НаСервере
Функция ОпределитьОтборНаСервере(пНастройкиКомпоновщика = Неопределено)
	
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	МакетСКД = пОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	
	Если пНастройкиКомпоновщика = Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(пНастройкиКомпоновщика);
	Конецесли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуИзСКД(Команда)
	
	лЗаполнитьТаблицуНаСервереИзМакета = Ложь;
	
	Если Таблица.Количество() > 0 Тогда
		лОповещение 	= Новый ОписаниеОповещения("СформироватьТаблицуИзСКД", ЭтаФорма, лЗаполнитьТаблицуНаСервереИзМакета);
		ПоказатьВопрос(лОповещение, "Перед заполнением таблица будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьТаблицуИзСКД(, лЗаполнитьТаблицуНаСервереИзМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	
	лЗаполнитьТаблицуНаСервереИзМакета = Истина;
	
	Если Таблица.Количество() > 0 Тогда
		лОповещение 	= Новый ОписаниеОповещения("СформироватьТаблицуИзСКД", ЭтаФорма, лЗаполнитьТаблицуНаСервереИзМакета);
		ПоказатьВопрос(лОповещение, "Перед заполнением таблица будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьТаблицуИзСКД(, лЗаполнитьТаблицуНаСервереИзМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуИзСКД(пРезультат, пЗаполнитьТаблицуНаСервереИзМакета = Ложь) Экспорт
	
	Если пРезультат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//Заполнение данных
	Если НЕ пЗаполнитьТаблицуНаСервереИзМакета Тогда
		ЗаполнитьТаблицуНаСервереИзЗапроса();
	Иначе
		ЗаполнитьТаблицуНаСервереИзМакета();
	КонецЕсли;
	
	ТаблицаПриИзменении(Неопределено);
	
	//Обязательные реквизиты
	лИмяОбязательныхРеквизитов 	= СтрРазделить("", ", ", Ложь);
	
	Для каждого ТаблицаСтрока Из Таблица Цикл
		
		лЕстьПустой 		= ЕстьПустой(ТаблицаСтрока, лИмяОбязательныхРеквизитов);
		ТаблицаСтрока.Флаг 	= НЕ лЕстьПустой;
		
	КонецЦикла;
	
	// Приминение условных оформлений
	ПерезаполнитьУФФормы();
	
	// Дополнительные программные условные оформления
	лЦветВыделенияФона = WebЦвета.СветлоКоралловый;
	ПрименитьУсловноеОфомление("Таблица.Флаг", ВидСравненияКомпоновкиДанных.Равно, Истина, "Таблица",,,, Истина); // Выделение жирным строк с флагом
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуНаСервереИзЗапроса()
	
	Запрос = Неопределено;
	
	Если НЕ Отбор Тогда
		Запрос = РеквизитФормыВЗначение("Объект").ПолучитьЗапросДанных(КомпоновщикНастроекКомпоновкиДанных);
	КонецЕсли;
	
	ЗаполнитьТаблицуНаСервере(Запрос);
	
	
КонецФункции // ЗаполнитьТаблицуНаСервереИзМакета() //--- КучеровРМ 05.11.2019

//+++ КучеровРМ 05.11.2019
&НаСервере
Функция ЗаполнитьТаблицуНаСервереИзМакета()
	
	лЗапрос 	= ПолучитьТЗИзМакета();
	
	ЗаполнитьТаблицуНаСервере(лЗапрос);
	
КонецФункции // ЗаполнитьТаблицуНаСервереИзМакета() //--- КучеровРМ 05.11.2019

&НаСервере
Функция ПолучитьТЗИзМакета(пСтруктураОтбора = Неопределено)
	
	Макет 	= ТабличныйДокумент; 
	
	ПостроительЗапроса 	= Новый ПостроительЗапроса;
	
	ОбластьМакета 	= Макет.Область(1, 1, Макет.ВысотаТаблицы, Макет.ШиринаТаблицы);
	
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьМакета);
	
	// Установим отборы
	Если пСтруктураОтбора <> Неопределено И ТипЗнч(пСтруктураОтбора) = Тип("Структура") Тогда
		Для каждого пСтруктураОтбораЭлем Из пСтруктураОтбора Цикл
			
			//УстановитьОтборПоПолю(ПостроительЗапроса,  пСтруктураОтбораЭлем.Ключ, пСтруктураОтбораЭлем.Значение); //Если через отдельную функцию
			ИмяПоляОтбора 		= пСтруктураОтбораЭлем.Ключ;
			ЗначениеОтбора 		= пСтруктураОтбораЭлем.Значение;
			
			ПолеДокумент 		= ПостроительЗапроса.ДоступныеПоля.Добавить(ИмяПоляОтбора, ИмяПоляОтбора);
			ПолеДокумент.Отбор 	= Истина;
			
			ЭлементОтбора		= ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);
			ЭлементОтбора.Установить(ЗначениеОтбора);
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Возвращаем таблицу значений с отобранными из макета данными 
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса;
	//Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции


&НаСервере
Процедура УстановитьЗаголовокКолонки(ИмяКолонки, ЗначениеЗаголовка)
	
	ЭлементНайти = Элементы.Найти(ИмяКолонки);
	Если ЭлементНайти = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ЭлементНайти.Заголовок 				= ЗначениеЗаголовка;
	
	ПредставлениеКолонокТекущая 		= ПредставлениеКолонок.НайтиПоЗначению(ИмяКолонки);
	ПредставлениеКолонокТекущая.Представление = ЗначениеЗаголовка;
	
КонецПроцедуры // УстановитьВидимостьКолонки()

&НаСервере
Процедура УстановитьВидимостьКолонки(ИмяКолонки, ЗначениеВидимости)
	
	ЭлементНайти = Элементы.Найти(ИмяКолонки);
	Если ЭлементНайти = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ЭлементНайти.Видимость 				= ЗначениеВидимости;
	
	ПредставлениеКолонокТекущая 		= ПредставлениеКолонок.НайтиПоЗначению(ИмяКолонки);
	ПредставлениеКолонокТекущая.Пометка = ЗначениеВидимости;
	
КонецПроцедуры // УстановитьВидимостьКолонки()

&НаСервере
Функция ПолучитьЗапросДанныхИзМодуляОбъекта(пСтруктураОтбора = Неопределено)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьЗапросДанных(КомпоновщикНастроекКомпоновкиДанных);
	
КонецФункции

&НаСервере
Функция ПолучитьСформированныеДанныеИзМодуляОбъекта(пСтруктураОтбора = Неопределено)
	
	Возврат РеквизитФормыВЗначение("Объект").СформироватьДанные(КомпоновщикНастроекКомпоновкиДанных);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуНаСервере(пЗапрос = Неопределено)
	
	//Получение данных
	ДанныеИзЗапроса = пЗапрос <> Неопределено;
	Если НЕ ДанныеИзЗапроса Тогда //Загрузим из СКД
		Запрос 				= ПолучитьСформированныеДанныеИзМодуляОбъекта();
	ИначеЕсли ТипЗнч(пЗапрос) = Тип("Запрос") Тогда	
		Запрос 				= пЗапрос;
	ИначеЕсли ТипЗнч(пЗапрос) = Тип("ПостроительЗапроса") Тогда	
		Запрос 				= пЗапрос;
	Иначе
		РезультатЗапроса 	= пЗапрос.Результат;
	КонецЕсли; 
	
	лИмяТаблицы = "Таблица"; //Основная таблица для обработки строк
	
	Если ТипЗнч(Запрос) = Тип("Запрос") Тогда
		РезультатЗапроса 	= Запрос.Выполнить();
		РезультатЗапросаТЗ 	= РезультатЗапроса.Выгрузить();
	ИначеЕсли ТипЗнч(Запрос) = Тип("ТаблицаЗначений") Тогда
		РезультатЗапросаТЗ 	= Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("ПостроительЗапроса") Тогда
		РезультатЗапросаТЗ 	= пЗапрос.Результат.Выгрузить();
	КонецЕсли; 
	
	//Подготовка таблицы к загрузке данных
	РезультатЗапросаТЗКолонки = РезультатЗапросаТЗ.Колонки;
	
	ПредставлениеКолонок.Очистить();
	
	Для каждого ИмяКолонки Из РезультатЗапросаТЗКолонки Цикл
		
		//Таблица.Колонки.Добавить(ИмяКолонки);
		ИмяКолонкиИмя 			= ИмяКолонки.Имя;
		ИмяКолонкиЗаголовок 	= ИмяКолонки.Заголовок; 
		ИмяКолонкиТипЗначения 	= ИмяКолонки.ТипЗначения;
		
		ПредставлениеКолонок.Добавить(лИмяТаблицы + ИмяКолонкиИмя, ИмяКолонкиЗаголовок, Истина); // Пометкой отмечаются видимые
		
		//Можно в запрос передать свой параметр (напр., "Флаг", который уже есть в реквизите ТЧ "Таблица", тогда его не создаст (т.к. уже найдёт существующий), и данные из запроса отобразятся в таблице
		ДобавитьКолонкуНаСервере(ИмяКолонкиИмя, ИмяКолонкиТипЗначения, СформироватьСиноним(ИмяКолонкиЗаголовок), лИмяТаблицы, Элементы.Таблица);
		
	КонецЦикла; 
	
	ПоместитьЭлементыВГруппу("НомерСтроки,Флаг"	, лИмяТаблицы, Элементы["ТаблицаНомерСтроки"]);
	
	// Установка видимости для служебных колонок (для отбора или условного оформления)
	//НазваниеКолонки = "НазваниеКолонки";
	//Если Элементы.Найти(НазваниеКолонки) <> Неопределено Тогда // Т.к. могло вернуться 0 элементов
	//	Элементы[НазваниеКолонки].Видимость = Ложь;  	
	//КонецЕсли;
	
	// Выполнение запроса для другого набора данных
	//Запрос = Запросы.ЗапросНабора2;
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	РезультатЗапросаТЗ = РезультатЗапроса.Выгрузить();
	//	Таблица.Загрузить(РезультатЗапросаТЗ);
	//КонецЕсли;
	
	Элементы.ПредставлениеКолонок.Видимость = УстановитьВидимостьНастройкиПредставления();
	
	//Загрузка данных, подготовка данных
	Таблица.Загрузить(РезультатЗапросаТЗ);
	
	Если Таблица.Количество() = 0 Тогда
		Сообщить("Не найдено элементов!");
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьТаблицуТоваровНаСервере()

&НаСервере
Процедура ПрочитатьДанныеТабличногоДокумента()
	
	лДанныеТабличногоДокумента = Новый ТаблицаЗначений;
	лИмяGUID = "GUID";
	лДанныеТабличногоДокумента.Колонки.Добавить(лИмяGUID);
	
	КолонкаGUID 	= 1; //Номер нужной колонки табличного документа. Отсчет начинается с 1
	
	Для лНомерТекущейСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		//Номер строки начинается с 1. Если первая колонка с наименованиями, то тогда: лНомерТекущейСтроки = 2
		
		//Получаем ячейки с данными
		лGUID 					= ТабличныйДокумент.Область("R" + Формат(лНомерТекущейСтроки, "ЧГ=") + "C" + Строка(КолонкаGUID));
		
		//Заполняем ТаблицуЗначений
		НоваяСтрока 			= лДанныеТабличногоДокумента.Добавить();
		НоваяСтрока[лИмяGUID] 	= лGUID.Текст;
		
	КонецЦикла;
	
	ДобавитьКолонкуНаСервере(лИмяGUID, Новый ОписаниеТипов("Строка"), СформироватьСиноним(лИмяGUID), "ДанныеТабличногоДокумента", Элементы.ДанныеТабличногоДокумента);
	
	ДанныеТабличногоДокумента.Загрузить(лДанныеТабличногоДокумента);
	//ДанныеТабличногоДокумента = лДанныеТабличногоДокумента.Скопировать();
	//ВыполнитьСверткуТаблицы();
	
КонецПроцедуры

//Процедура программно добавит колонку в таблицу
//-------------------------------------------------------------------------
//Параметры:
//		ИмяКолонки - Строка - вида "Тест3"
//		ОписаниеТипов - ОписаниеТипов - напр., "Строка"
//		Заголовок - Строка - напр., "Пример"
//		Реквизит - Строка - Путь к реквизиту, напр "Таблица" или "Объект.Таблица"
//		ЭлементыРеквизит - ТаблицаФормы - Путь к элементу на форме
//-------------------------------------------------------------------------
//автор: Кучеров Р 28.05.2018 
&НаСервере
Процедура ДобавитьКолонкуНаСервере(ИмяКолонки, ОписаниеТипов, Заголовок, Реквизит, ЭлементыРеквизит)
	
	РеквизитИмяКолонки = Реквизит + ИмяКолонки;
	Если Элементы.Найти(РеквизитИмяКолонки) = Неопределено Тогда //Если нет элемента на форме, то мы не создавали его реквизит
		нРеквизиты = Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(ОписаниеТипов,, "NULL"), Реквизит, Заголовок, Истина));
		ИзменитьРеквизиты(нРеквизиты);
		
		нЭлемент = Элементы.Добавить(РеквизитИмяКолонки, Тип("ПолеФормы"), ЭлементыРеквизит);
		нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		нЭлемент.ПутьКДанным = Реквизит + "." + ИмяКолонки;
	КонецЕсли; 
	
КонецПроцедуры

//+++ КучеровРМ 06.04.2020
&НаСервере
Функция ПоместитьЭлементыВГруппу(пСтрокаЭлементов, пРодительИмя, пВставитьПеред = Неопределено)
	
	лИмяЭлемента 			= пРодительИмя;
	лИменаКолонок 			= СтрРазделить(пСтрокаЭлементов, ",", Ложь);
	лИмяГруппыСЭлементами 	= "";
	лМассивЭлементовВГруппу = Новый Массив;
	Для каждого лЭлем Из лИменаКолонок Цикл
		лМассивЭлементовВГруппу.Добавить(Элементы[лИмяЭлемента + лЭлем]);
		лИмяГруппыСЭлементами = лИмяГруппыСЭлементами + лЭлем;
	КонецЦикла;
	ПоместитьЭлементыВГруппуНаСервере(лИмяГруппыСЭлементами, лМассивЭлементовВГруппу, Элементы[пРодительИмя], пВставитьПеред, пРодительИмя);
	
КонецФункции // ПоместитьЭлементыВГруппу() //--- КучеровРМ 06.04.2020
 
&НаСервере
Процедура ПоместитьЭлементыВГруппуНаСервере(пИмяГруппы, пМассивЭлементов, ЭлементРодитель, пВставитьПеред, пПрефикс = "")
	
	лТипЭлемента 		= Тип("ГруппаФормы");
	лГруппаПолноеИмя 	= пПрефикс + "Группа" + пИмяГруппы;
	Если Элементы.Найти(лГруппаПолноеИмя) = Неопределено Тогда //Если нет элемента на форме
		
		Если пВставитьПеред = Неопределено Тогда
			лГруппа 	= Элементы.Добавить(лГруппаПолноеИмя, лТипЭлемента, ЭлементРодитель);
		Иначе
			лГруппа 	= Элементы.Вставить(лГруппаПолноеИмя, лТипЭлемента, ЭлементРодитель, пВставитьПеред);
		КонецЕсли;
		
		//лГруппа.Вид			=	ВидГруппыФормы.ОбычнаяГруппа;
		лГруппа.Заголовок	=	лГруппаПолноеИмя;
		лГруппа.ОтображатьЗаголовок = Ложь;
		
		Для каждого пМассивЭлементовСтрока Из пМассивЭлементов Цикл
			
			Элементы.Переместить(пМассивЭлементовСтрока, лГруппа);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

//Процедура ПрименитьУсловноеОфомление 
//-------------------------------------------------------------------------
//Параметры:
//		ИмяПроверяемогоЭлемента - Строка - Напр., "Объект.Имя_Проверяемого_Элемента"
//		ВидСравненияКД - Строка - ВидСравненияКомпоновкиДанных., напр ВидСравненияКомпоновкиДанных.Равно
//		ПравоеЗначениеОтбора - ЛюбойТип - Ннапр., Истина
//		ИмяОформляемогоЭлемента - Строка - Напр., "Имя_Оформляемого_Элемента"
//		ИдентификаторПользовательскойНастройки - Строка - Напр., "ИдентификаторПользовательскойНастройки" (ИПН)
//														если заданный ИПН не найден, будет добавлен слемент с этим ИПН
//		ЦветТекста - WebЦвета - Напр., WebЦвета.Черный
//		ЦветФона - WebЦвета - Напр., WebЦвета.Лосоль
//		ЖирныйШрифт - Булево - Напр., Истина
//-------------------------------------------------------------------------
//автор: КучеровРМ 30.07.2018
&НаСервере
Процедура ПрименитьУсловноеОфомление(ИмяПроверяемогоЭлемента, ВидСравненияКД, ПравоеЗначениеОтбора, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = "", ЦветТекста = Неопределено, ЦветФона = Неопределено, ЖирныйШрифт = Ложь)
	
	УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	
	Если ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ПрисвоитьИдентификаторПользовательскойНастройки = ИмяПроверяемогоЭлемента + "_" + ИмяОформляемогоЭлемента;
	КонецЕсли;
	
	ЕстьЭлементСИПН = Ложь;
	
	Для каждого ЭлементУО Из УсловноеОформлениеЭлементы Цикл
		
		Если ЭлементУО.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки Тогда
			ЕстьЭлементСИПН = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ЕстьЭлементСИПН Тогда // Добавляем новое условное офомление
		//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
		ЭлементОформления = УсловноеОформлениеЭлементы.Добавить();
		
		ЭлементОформления.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки;
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = "Объект.Имя_Проверяемого_Элемента"
		ЭлементОтбора.ВидСравнения = ВидСравненияКД; 
		//Значение для отбора
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначениеОтбора;
		ЭлементОтбора.Использование = Истина;
		// Установка значения элемента УО
		Если ЦветТекста <> Неопределено Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста); // WebЦвета.Черный
		КонецЕсли; 
		Если ЦветФона <> Неопределено Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона); // Томатный, Лосоль
		КонецЕсли;
		Если ЖирныйШрифт Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
		КонецЕсли;
		
		// Создаем поля оформления
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлемента); // ИмяОформляемогоЭлемента = "Имя_Оформляемого_Элемента"
		ПолеОформления.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

 
&НаСервере
Процедура ДобавитьУсловноеОфомление(УсловноеОформлениеЭлементы, ИмяПроверяемогоЭлемента, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = "")
	
	//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	ЭлементОформления = УсловноеОформлениеЭлементы.Добавить();
	
	ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	// Создаем условие отбора
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = "Объект.Имя_Проверяемого_Элемента"
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//Значение для отбора
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	// Установка значения элемента УО
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Коралловый); // Томатный, Лосоль
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
	// Создаем поля оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлемента); // ИмяОформляемогоЭлемента = "Имя_Оформляемого_Элемента"
	ПолеОформления.Использование = Истина; 
	
КонецПроцедуры

//Возвращает схему компановки данных, полученную из макета или только имя макета (в зависсимости от параметра)
&НаСервере
Функция ПолучитьСхемуКомпоновкиДанных(ТолькоИмяВернуть = Ложь)
	
	СхемаКомпоновкиДанных 	= Неопределено;
	ОбработкаОбъект 		= РеквизитФормыВЗначение("Объект");
    
	СхемаКомпоновкиДанныхИмя = "СхемаКомпоновкиДанных";
	
	Возврат  ?(ТолькоИмяВернуть, СхемаКомпоновкиДанныхИмя, ОбработкаОбъект.ПолучитьМакет(СхемаКомпоновкиДанныхИмя));
 	
КонецФункции

&НаСервере
Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ЗапросНабора1" , Неопределено);
	//Структура.Вставить("ЗапросНабора2", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции // ПолучитьПустуюСтруктуруРезультата()

&НаСервере
 Функция ПолучитьПустуюСтруктуруНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив); //
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
//Функция Функция подготавливает структуру данных, необходимую для вывода
//-------------------------------------------------------------------------
//Параметры:
//		СтруктураНастроек - Тип - описание
//		ОбработкаОбъект - Тип - описание
//Возвращаемое значение:
//		Стрруктура - описание
//-------------------------------------------------------------------------
//автор: Кучеров Р 28.05.2018 
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, ОбработкаОбъект) Экспорт
    
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА СХЕМЫ КОМПОНОВКИ ДАННЫХ И КОМПОНОВЩИКА НАСТРОЕК СКД
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);

	// Подготовка компоновщика макета компоновки данных.
	Компоновщик 	= Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйИсточник 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Компоновщик.Инициализировать(НовыйИсточник);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	//Копирование настроек с формы в компоновщик	
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		СкопироватьЭлементы(Компоновщик.Настройки.Выбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Выбор);
		СкопироватьЭлементы(Компоновщик.Настройки.Порядок, СтруктураНастроек.КомпоновщикНастроек.Настройки.Порядок);
		СкопироватьЭлементы(Компоновщик.Настройки.УсловноеОформление, СтруктураНастроек.КомпоновщикНастроек.Настройки.УсловноеОформление);
	КонецЕсли;
	
	// Параметры компоновщика настроек.
	//Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
	//	Для каждого Элемент  из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
	//		ЗначениеПараметраИзСтруктурыНастроек = СтруктураНастроек.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Элемент.Параметр) ;
	//		Если Строка(ЗначениеПараметраИзСтруктурыНастроек.Параметр) = "ВыводитьСерии" Тогда
	//			ЗначениеПараметра = ЗначениеПараметраИзСтруктурыНастроек.Значение и ЗначениеПараметраИзСтруктурыНастроек.Использование;
	//			Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Параметр,ЗначениеПараметра);
	//		Иначе	
	//			Если ЗначениеПараметраИзСтруктурыНастроек.Использование Тогда
	//				Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Параметр,ЗначениеПараметраИзСтруктурыНастроек.Значение);
	//			КонецЕсли;
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли; 	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ВСПОМОГАТЕЛЬНЫХ ДАННЫХ ДЛЯ СОПОСТАВЛЕНИЯ ПОЛЕЙ ШАБЛОНА И СКД
	
	//Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля Цикл
	//	СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(ПолучитьИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	//КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// ВЫПОЛНЕНИЕ ЗАПРОСА
	
	СтруктураРезультата.ЗапросНабора1 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос);
	//СтруктураРезультата.ЗапросНабора2 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных2.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		СтруктураРезультата.ЗапросНабора1.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		//СтруктураРезультата.ЗапросНабора2.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции // ПодготовитьСтруктуруДанных()

&НаСервере
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Копирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) 
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Найти поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции // НайтиПолеСКДПоПолномуИмени()

&НаСервере
// Функция выполняет получение имени поля из доступных полей компоновки данных.
//
Функция ПолучитьИмяПоляВШаблоне(Знач ИмяПоля) Экспорт
	
	ИмяПоля = СтрЗаменить(ИмяПоля, ".DeletionMark", ".ПометкаУдаления");
	ИмяПоля = СтрЗаменить(ИмяПоля, ".Owner", ".Владелец");
	ИмяПоля = СтрЗаменить(ИмяПоля, ".Code", ".Код");
	ИмяПоля = СтрЗаменить(ИмяПоля, ".Parent", ".Родитель");
	ИмяПоля = СтрЗаменить(ИмяПоля, ".Predefined", ".Предопределенный");
	ИмяПоля = СтрЗаменить(ИмяПоля, ".IsFolder", ".ЭтоГруппа");
	ИмяПоля = СтрЗаменить(ИмяПоля, ".Description", ".Наименование");
	Возврат ИмяПоля;
	
КонецФункции // ПолучитьИмяПоляВШаблоне()

&НаСервере
// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = Найти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = Найти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

&НаСервере
// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПолеСКДПоИмени()

//---====== Отбор СКД ================================================ 

//+++ ====== Условное оформление ================================================
// https://infostart.ru/public/186640/

// Процедуры для работы с условным оформлением

&НаСервере
Процедура ПерезаполнитьУФФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	УсловноеОформлениеКомпоновщика = КомпоновщикНастроекКомпоновкиДанных.Настройки.УсловноеОформление;
	
	Для каждого ЭлементУФ Из УсловноеОформлениеКомпоновщика.Элементы Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = ЭлементУФ.Использование;
		
		// Заполняем поля к которым будет применятся условное оформление
		СкопироватьПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементУФ);
		
		// Заполняем отбор для условного офрмления
		СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементУФ.Отбор);
		
		// Заполняем элементы условного офрмления
		СкопироватьЭлементОформления(ЭлементУсловногоОформления, ЭлементУФ);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьУФФормы()

&НаСервере
Процедура СкопироватьПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	ЭлементыПоля = ЭлементКомпоновщика.Поля.Элементы;
	Если ЭлементыПоля.Количество() = 0 Тогда
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Таблица");
		ОформляемоеПоле.Использование = Истина;
	Иначе
		Для каждого ЭлементПоля Из ЭлементыПоля Цикл
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(ОформляемоеПоле, ЭлементПоля);
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Строка(ЭлементПоля.Поле));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СкопироватьПоляУсловногоОформления()

&НаСервере
Процедура СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	Для каждого ЭлементОтбора Из ЭлементКомпоновщика.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаОтбора, ЭлементОтбора);
			СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Таблица." + Строка(ЭлементОтбора.ЛевоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОтборУсловногоОформления()

&НаСервере
Процедура СкопироватьЭлементОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	ЭлементыОформления = ЭлементКомпоновщика.Оформление.Элементы;
	
	Для каждого ЭлементОформления Из ЭлементыОформления Цикл
		Если ЭлементОформления.Использование Тогда
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Параметр, ЭлементОформления.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьЭлементОформления()

//--- ====== Условное оформление ================================================ 

//+++====== Обработать таблицу ================================================

&НаКлиенте
Процедура УстановитьФлагТаблицы(Таблица, ЗначениеФлага = Неопределено)
	
	лЕстьЗначениеФлага = ЗначениеФлага <> Неопределено;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		Если лЕстьЗначениеФлага Тогда
			СтрокаТаблицы.Флаг = ЗначениеФлага;
		Иначе
			СтрокаТаблицы.Флаг = НЕ СтрокаТаблицы.Флаг;
		КонецЕсли; 
		
	КонецЦикла;
	
	ТаблицаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУстановитьФлаги(Команда)
	
	УстановитьФлагТаблицы(Таблица, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСнятьФлаги(Команда)
	
	УстановитьФлагТаблицы(Таблица, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИнвертироватьФлаги(Команда)
	
	УстановитьФлагТаблицы(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВосстановитьФлаги(Команда)
	
	ТаблицаСнятьФлаги(Неопределено);
	
	ТаблицаКоличество = Таблица.Количество() - 1; // "-1" т.к. ПредыдущиеФлаги считаются с 0 
	
	Для каждого ПредФлаг Из ПредыдущиеФлаги Цикл
		
		ПредФлагЗначение = ПредФлаг.Значение;
		Если ТаблицаКоличество >= ПредФлагЗначение Тогда
			Таблица[ПредФлагЗначение].Флаг = Истина;	
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСохранитьФлаги(Команда)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Флаг", Истина);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущиеФлаги.Очистить();
	
	НайденныеСтрокиКоличество = НайденныеСтроки.Количество();
	Для каждого СтрокаТаблицыФлаг Из НайденныеСтроки Цикл
		
		ПредыдущиеФлаги.Добавить(СтрокаТаблицыФлаг.НомерСтроки - 1,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Прогрессор(Сообщение, Всего, Текущ)
	Если Всего > 0 Тогда
		Процент = Цел(Текущ / Всего * 100);
		
		Если Процент > Цел((Текущ - 1) / Всего * 100) Тогда
			ТекстСообщения = Сообщение + ": " + Формат(Процент, "Ч(0)2") + "% " + СтрЗаменить(Формат("", "С" + Мин(99, Процент)), " ", "l") + СтрЗаменить(Формат("", "С" + Мин(99, 99 - Процент)), " ", "'") + "l";
			Состояние(ТекстСообщения, Процент, "Ожидайте");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НачалоОбработки(Таблица, ИмяФлага = "Флаг", пПоказатьВопрос = Ложь)
	
	лРезультат = Неопределено;
	
	#Если НаКлиенте Тогда
		Если пПоказатьВопрос Тогда
			Если Таблица.Количество() > 0 Тогда
				Ответ = Вопрос("Начать обработку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Подтверждение начала обработки");
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли; 
	#КонецЕсли
	
	// Дальнейшая обработка только тех, что с флагом
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(ИмяФлага, Истина);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	лРезультат = НайденныеСтроки;
	
	Возврат лРезультат;
	
КонецФункции // НачалоОбработки()

&НаКлиенте
Процедура Обработать(Команда)
	
	лОповещение 	= Новый ОписаниеОповещения("ОбработатьТаблицу", ЭтаФорма);
	ПоказатьВопрос(лОповещение, "Начать обработку?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры		

&НаКлиенте
Процедура ОбработатьТаблицу(пРезультат, пПараметры) Экспорт
	
	Если пРезультат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = НачалоОбработки(Таблица);
	
	Если НайденныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ии = 0;                    
	НайденныеСтрокиКоличество = НайденныеСтроки.Количество();
	Для каждого СтрокаТаблицыФлаг Из НайденныеСтроки Цикл
		
		//В параметры заносим все нужные для обработки данные, в том числе строки таблицы, которые надо будет изменить или заполнить с нуля
		ПараметрыОбработки 	= СтруктураПараметров(СтрокаТаблицыФлаг);
		//ПараметрыОбработки.ПараметрыФормированияЗаданий = Истина;
		
		ОбработкаСтрокТаблицы(СтрокаТаблицыФлаг, ПараметрыОбработки); 
		
		//После обработки строки из Параметров можем перезаполнить или заполнить строки, если надо
		//СтрокаТаблицыФлаг.Ссылка 	= ПараметрыОбработки.Ссылка;
		
		Прогрессор("Выполнение обработки отмеченных элементов", НайденныеСтрокиКоличество, ии);
		
		ии 	= ии + 1;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ОбновитьДанныеТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТаблицы()
	
	Если ОбновитьДанныеТаблицы Тогда
		ЗаполнитьТаблицуНаСервере(); 	// Обновление данных в таблице
		ОбновитьСтрокиТаблицы(); 		// Пронумеровать строки таблицы
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьДанныеТаблицы()

&НаКлиенте
Функция СтруктураПараметров(СтрокаТаблицы, пКолонки = Неопределено)
	
	ПараметрыОбработки = Новый Структура; // Все данные, которые с Клиента надо отправить на Сервер
	
	ПараметрыОбработки.Вставить("ЗаполнитьИзМакета"	, 	ЗаполнитьИзМакета);
	ПараметрыОбработки.Вставить("Ссылка"			, 	СтрокаТаблицы.Ссылка);
	
	// Здесь же можно задавать параметры от разных кнопок обработки, чтобы всё проделать в одной процедуре
	//ПараметрыОбработки.Вставить("ПерепровестиДвижения"	, 	Неопределено);
	
	Возврат ПараметрыОбработки;
	
КонецФункции // СтруктураПараметров()

&НаКлиенте
Процедура ОбработкаСтрокТаблицы(СтрокаТаблицы, ПараметрыОбработки = Неопределено)
	
	// Здесь подготавливаются данные перед отправкой на сервер. Проверяются условия данных.
	
	// К программно сгенерированным колонкам можно нормально обращаться по имени, напр, "СтрокаТаблицы.Ссылка"
	
	СтрокаТаблицыНомерСтроки = СтрокаТаблицы.НомерСтроки;
	
	Если ПропускатьОшибки Тогда
		
		Попытка
			
			ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицыНомерСтроки, ПараметрыОбработки, ТестовыйРежим); 
			
		Исключение
			Сообщить("Ошибка при обработке строки № " + СтрокаТаблицыНомерСтроки + ": " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки; 
		
	Иначе
		ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицыНомерСтроки, ПараметрыОбработки, ТестовыйРежим); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицыНомерСтроки, ПараметрыОбработки, ТестовыйРежим)
	
	лСсылка = ПараметрыОбработки.Ссылка;
	лОбъект = лСсылка.ПолучитьОбъект();
	
	// Изменения объекта
	// ПрисвоитьЗначение(ЧемуПрисвоить, ЧтоПрисвоить, ТестовыйРежим = Ложь, ДопТекстВНачалеСообщения = "", ДопТекстВКонцеСообщения = "")
	ИнфоСтроки = "Строка № " + СтрокаТаблицыНомерСтроки + " ";
	ПрисвоитьЗначение(лОбъект.Наименование, лОбъект.Наименование + " (тест)", ТестовыйРежим, ИнфоСтроки, " (Наименование)");

	лСообщение 				= Новый СообщениеПользователю;
	лСообщение.Текст 		= "Выбранная карточка " + лОбъект.Ссылка;
	лСообщение.КлючДанных 	= лОбъект.Ссылка;
	лСообщение.Сообщить();
	
	// Запись объекта, приминение изменений
	ЗаписатьОбъект(лОбъект,, ТестовыйРежим);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьОбъект(ОбъектЗаписи, Проводить = Ложь, ТестовыйРежим = Ложь)
	
	лРезультат = Неопределено;
	
	// Запись объекта, приминение изменений
	Если НЕ ТестовыйРежим Тогда
		Если Проводить Тогда
			ОбъектЗаписи.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектЗаписи.Записать();
		КонецЕсли; 
	КонецЕсли;
	
	Возврат лРезультат; //Напр., ОбъектЗаписи.Ссылка
	
КонецФункции // ЗаписатьОбъект()

//Процедура присвоения одного значения другому с возможностью настроить тестовый вывод
//-------------------------------------------------------------------------
//Параметры:
//		ЧемуПрисвоить - ЛюбойТип - Чему присвоить значение, переданное в "ЧтоПрисвоить"
//		ЧтоПрисвоить - ЛюбойТип - Какое значение присвоить значение "ЧемуПрисвоить"
//		ТестовыйРежим - Булево - описание
//		ДопТекстВНачалеСообщения - Строка - описание
//		ДопТекстВКонцеСообщения - Строка - описание
//-------------------------------------------------------------------------
// Например, ПрисвоитьЗначение(А, Б) присвоит А значение Б (аналог А = Б)
//-------------------------------------------------------------------------
//автор: Кучеров Р 21.06.2018
&НаСервереБезКонтекста
Процедура ПрисвоитьЗначение(ЧемуПрисвоить, ЧтоПрисвоить, ТестовыйРежим = Ложь, ДопТекстВНачалеСообщения = "", ДопТекстВКонцеСообщения = "")
	
	Если ТестовыйРежим Тогда
		Если ЧемуПрисвоить <> ЧтоПрисвоить Тогда
			ТекстТестовогоСообщения = ДопТекстВНачалеСообщения + "Значению «" + Строка(ЧемуПрисвоить) + "» будет присвоено «" + Строка(ЧтоПрисвоить) + "»" + ДопТекстВКонцеСообщения;
		Иначе
			ТекстТестовогоСообщения = ДопТекстВНачалеСообщения + "Значению «" + Строка(ЧемуПрисвоить) + "» будет присвоено «" + Строка(ЧтоПрисвоить) + "» (равны)" + ДопТекстВКонцеСообщения;
		КонецЕсли;
		Сообщить(ТекстТестовогоСообщения);
	ИначеЕсли ЧемуПрисвоить <> ЧтоПрисвоить Тогда
		ЧемуПрисвоить = ЧтоПрисвоить;
	КонецЕсли; 
	
КонецПроцедуры // ПрисвоитьЗначение()

&НаКлиенте
Процедура ОбновитьСтрокиТаблицы()
	
	ВыполнитьПересчетНомерСтроки(Таблица, "НомерСтроки", "Флаг", ОтмеченныхНаДействиеСтрокТаблицы, Истина);
	ОбщееКоличествоСтрокТаблицы = Таблица.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриИзменении(Элемент)
	
	ОбновитьСтрокиТаблицы();
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПустой(пСтрока, пМассивЭлементов)
	
	Результат = Ложь;
	
	Для каждого Поле Из пМассивЭлементов Цикл
		
		Если НЕ ЗначениеЗаполнено(пСтрока[Поле]) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьПересчетНомерСтроки(Таблица, ИмяНомераСтроки, ИмяФлагаНаДействие, КоличествоОтмеченныхНаДействие, Нумеровать = Ложь)
	
	Если ПустаяСтрока(ИмяНомераСтроки) Тогда
		Возврат;
	КонецЕсли; 
	
	Инд = 1;
	КоличествоДобавляемых = 0;
	Для Каждого СтрокаТЧ Из Таблица Цикл
		Если Нумеровать Тогда
			СтрокаТЧ[ИмяНомераСтроки] 	= Инд;
			Инд 						= Инд + 1;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ИмяФлагаНаДействие) Тогда
			Если СтрокаТЧ[ИмяФлагаНаДействие] Тогда
				КоличествоДобавляемых = КоличествоДобавляемых + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоОтмеченныхНаДействие <> Неопределено Тогда
		КоличествоОтмеченныхНаДействие = КоличествоДобавляемых;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКолонокПриИзменении(Элемент)
	
	ЭлементТекущиеДанные 			= Элемент.ТекущиеДанные;
	ЭлементТекущиеДанныеЗначение 	= ЭлементТекущиеДанные.Значение; 
	ЭлементТекущиеДанныеПометка 	= ЭлементТекущиеДанные.Пометка; 
	ЭлементТекущиеДанныеПредставление = ЭлементТекущиеДанные.Представление; 
	
	УстановитьВидимостьКолонки(ЭлементТекущиеДанныеЗначение, ЭлементТекущиеДанныеПометка);
	
	УстановитьЗаголовокКолонки(ЭлементТекущиеДанныеЗначение, ЭлементТекущиеДанныеПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЧерезМодуль(Команда)
	
	Ответ 	= Вопрос("Обработаются сразу все элементы. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Подтверждение");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЧерезМодульНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЧерезМодульНаСервере()
	
	ОбъектЗначение 	= РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ВыполнитьКоманду("ВыполнитьКоманду");
	
КонецПроцедуры

//---====== Обработать таблицу ================================================ 

&НаКлиенте
Процедура ОткрытьИсториюВерсий(Команда)
	
	МетаданныеОбработки 			= ПолучитьМетаданныеОбработки("Имя, Комментарий");
	
	ИмяОбработки 					= МетаданныеОбработки.Имя;
	ЭтотОбъектМетаданныеКомментарий = МетаданныеОбработки.Комментарий;
	КомментарийМассив 				= СтрРазделить(ЭтотОбъектМетаданныеКомментарий, ",", Ложь);
	ВерсияОбработки 				= СтрЗаменить(КомментарийМассив[0], "v", ""); 	// Возьмем из комментария
	
    ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.ИсторияВерсий", Новый Структура("ВерсияОбработки", ВерсияОбработки));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзМакетаПриИзменении(Элемент)
	
	НачальнаяВидимостьЭлементов();
	
	//Элементы.ЗаполнитьТаблицу.Видимость 		= ЗаполнитьИзМакета;
	//Элементы.ЗаполнитьТаблицу.КнопкаПоУмолчанию = ЗаполнитьИзМакета;
	//
	//Элементы.ЗаполнитьТаблицуИзСКД.Видимость 			= НЕ ЗаполнитьИзМакета;
	//Элементы.ЗаполнитьТаблицуИзСКД.КнопкаПоУмолчанию 	= НЕ ЗаполнитьИзМакета;
	//
	//Элементы.ГруппаТабличногоДокумента.Видимость 		= ЗаполнитьИзМакета; 
	
КонецПроцедуры

//+++ КучеровРМ 18.11.2019
&НаКлиенте
Функция НачальнаяВидимостьЭлементов()
	
	Элементы.ЗаполнитьТаблицу.Видимость 		= ЗаполнитьИзМакета;
	Элементы.ЗаполнитьТаблицу.КнопкаПоУмолчанию = ЗаполнитьИзМакета;
	
	Элементы.ЗаполнитьТаблицуИзСКД.Видимость 			= НЕ ЗаполнитьИзМакета;
	Элементы.ЗаполнитьТаблицуИзСКД.КнопкаПоУмолчанию 	= НЕ ЗаполнитьИзМакета;
	
	Элементы.ГруппаТабличногоДокумента.Видимость 		= ЗаполнитьИзМакета;
	
КонецФункции // НачальнаяВидимостьЭлементов() //--- КучеровРМ 18.11.2019

&НаКлиенте
Процедура Ссылки(Команда)
	
	Список 		= Новый СписокЗначений;	
	Список.Добавить("https://github.com/quoe/1C-DataUniversal", "Здесь на Git'е обитает Внешняя обработка (универсал)",, Элементы.ФормаСсылки.Картинка);
	Список.Добавить("https://github.com/quoe", "Github создателя",, Элементы.ФормаСсылки.Картинка);
	
	Оповещение 	= Новый ОписаниеОповещения("ПослеВыбораИзМенюСсылки", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюСсылки(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ЗапуститьПриложение(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры       


